{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "red",
    "glyph" : "magic"
  },
  "name" : "Test Small Chart",
  "script" : "\/*\n * Created by: ng\n * Twitter: @iamng_eth\n *\n * Version: 0.1.0\n * Last Update: 14.01.2023\n *\n * Enjoy!\n *\/\n\nconst daysInChart = 30\n\nconst data = await loadData(daysInChart)\n\nconst greenChart = true\n\nconst chartLineColor = greenChart ? new Color('#4DD964') : new Color('#FE3934')\nconst chartFillColor = greenChart ? new Color('#4DD964', 0.12) : new Color('#FE3934', 0.12)\nconst changeTextColor = chartLineColor\nconst floorTextColor = chartLineColor\nconst widgetBgColor = new Color(\"#000000\")\nconst collectionNameColor = new Color('#B4B4B4')\n\nconst w = new ListWidget()\nw.backgroundColor = widgetBgColor\n\/\/ w.url = \n\nconst collectionW = w.addStack()\ncollectionW.layoutHorizontally()\n\nconst icon = await loadImage(data.image)\nconst iconImg = collectionW.addImage(icon)\niconImg.imageSize = new Size(30, 30)\n\ncollectionW.addSpacer(6)\n\nconst collectionInfoW = collectionW.addStack()\ncollectionInfoW.layoutVertically()\n\nconst collectionTxt = collectionInfoW.addText(data.name)\ncollectionTxt.textColor = collectionNameColor\ncollectionTxt.font = Font.boldRoundedSystemFont(12);\n\ncollectionInfoW.addSpacer(1)\n\nconst dayChangeTxt = collectionInfoW.addText(`+5% · 0.12Ξ`)\ndayChangeTxt.textColor = changeTextColor\ndayChangeTxt.font = Font.mediumRoundedSystemFont(10);\n\nw.addSpacer(6)\n\nconst floorTxt = w.addText(`${data.floor} Ξ`)\nfloorTxt.textColor = floorTextColor\nfloorTxt.font = Font.heavyRoundedSystemFont(26);\n\nw.addSpacer(null)\n\nclass LineChart {\n    constructor(width, height, values) {\n        this.ctx = new DrawContext();\n        this.ctx.size = new Size(width, height);\n        this.values = getChartDataPoints(values);\n    }\n\n    _calculatePath(type) {\n        let maxValue = Math.max(...this.values);\n        let minValue = Math.min(...this.values);\n        let difference = maxValue - minValue;\n        let count = this.values.length;\n        let step = this.ctx.size.width \/ (count - 1);\n        let points = this.values.map((current, index, all) => {\n            let x = step * index;\n            let y = this.ctx.size.height - (current - minValue) \/ difference * (this.ctx.size.height * 0.5);\n            return new Point(x, y);\n        });\n        return this._getSmoothPath(points, type);\n    }\n\n    _getSmoothPath(points, type) {\n        let path = new Path();\n        if (type == 'fill') {\n            path.move(new Point(0, this.ctx.size.height))\n        } else {\n            path.move(new Point(0, points[0].y))\n        }\n        path.addLine(points[0]);\n        for (let i = 0; i < points.length - 1; i++) {\n            let xAvg = (points[i].x + points[i + 1].x) \/ 2;\n            let yAvg = (points[i].y + points[i + 1].y) \/ 2;\n            let avg = new Point(xAvg, yAvg);\n            let cp1 = new Point((xAvg + points[i].x) \/ 2, points[i].y);\n            let next = new Point(points[i + 1].x, points[i + 1].y);\n            let cp2 = new Point((xAvg + points[i + 1].x) \/ 2, points[i + 1].y);\n            path.addQuadCurve(avg, cp1);\n            path.addQuadCurve(next, cp2);\n        }\n        if (type == 'fill') {\n            path.addLine(new Point(this.ctx.size.width, this.ctx.size.height));\n            path.closeSubpath();\n        }\n        return path;\n    }\n\n    draw() {\n        this.ctx.opaque = false;\n        this.ctx.respectScreenScale = true\n\n        let fillPath = this._calculatePath('fill');\n        this.ctx.addPath(fillPath);\n        this.ctx.setFillColor(chartFillColor);\n        this.ctx.fillPath(fillPath);\n\n        let strokePath = this._calculatePath();\n        this.ctx.addPath(strokePath);\n        this.ctx.setStrokeColor(chartLineColor)\n        this.ctx.setLineWidth(10)\n        this.ctx.strokePath()\n\n        return this.ctx;\n    }\n\n}\n\nconst chart = new LineChart(600, 600, data.history.data).draw().getImage();\nw.backgroundImage = chart\n\n\/\/ if (config.runsWithSiri) {\n\/\/     Speech.speak('You have ' + followers_total + ' followers')\n\/\/ }\n\nScript.setWidget(w)\nScript.complete()\nw.presentSmall()\n\n\/*\n* Utility Functions\n*\/\n\nasync function loadImage(imgUrl) {\n    const req = new Request(imgUrl)\n    return await req.loadImage()\n}\n\nasync function loadData(history) {\n    const url = `https:\/\/api.nftwidgets.iamng.wtf\/rektguy?history=${history}`\n    const req = new Request(url)\n    req.method = 'GET'\n    req.headers = { 'Content-Type': 'application\/json' }\n    const res = await req.loadJSON()\n\n    return res\n}\n\nfunction getChartDataPoints(values) {\n    let chartValues = []\n    for (const data of values) {\n        chartValues.push(data.avgPrice);\n    }\n    return chartValues;\n}\n",
  "share_sheet_inputs" : [

  ]
}